apply plugin: 'java'
//apply plugin: 'findbugs'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

def loadProperties(propsFilename) {
    def props = new Properties()
    new File(propsFilename).withInputStream {
        stream -> props.load(stream)
    }
    return new ConfigSlurper().parse(props)
}

def config = loadProperties("build.properties")
def env = System.getenv()

jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile group: 'com.google.code.gson', name: 'gson', version: '2.3.1'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.0'
    compile group: 'args4j', name: 'args4j', version: '2.0.29'
    compile group: 'org.slf4j', name:'slf4j-api', version: '1.7.9'
    compile group: 'ch.qos.logback', name:'logback-classic', version: '1.1.2'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.0.4-beta'
}

task buildInfo {
    if (env.BUILD_NUMBER != null) {
        ext.build_number = "${env.BUILD_NUMBER}"
    } else {
        def tag_cmd = "git rev-parse --short HEAD"
        def tag_proc = tag_cmd.execute()
        tag_proc.waitFor()
        def branch_cmd = "git branch"
        def branch_proc = branch_cmd.execute()
        branch_proc.waitFor()
        if (tag_proc.exitValue() == 0 && branch_proc.exitValue() == 0) {
            ext.build_number = branch_proc.text.split(' ')[1].trim() + "-" + tag_proc.text.trim()
        } else {
            ext.build_number = "unknown"
        }
    }
}

version = "${config.framework_version}.${project.buildInfo.build_number}"